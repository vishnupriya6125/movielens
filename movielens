{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNyYR06hhFTNiRdlB9GZ3TT",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vishnupriya6125/movielens/blob/main/movielens\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "khXLkswZamjI",
        "outputId": "d432d5d6-5f49-4bb1-82df-185f32c33d5a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Recommendations for Movie A: ['Movie D', 'Movie E']\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "\n",
        "movies = {\n",
        "    'movie_id': [1, 2, 3, 4, 5],\n",
        "    'title': ['Movie A', 'Movie B', 'Movie C', 'Movie D', 'Movie E'],\n",
        "    'genres': ['Action, Comedy', 'Drama, Romance', 'Sci-Fi, Thriller', 'Comedy', 'Action, Thriller'],\n",
        "    'description': ['Action-packed comedy', 'Heartwarming drama', 'Sci-fi thriller with suspense', 'Hilarious comedy', 'Action thriller with twists']\n",
        "}\n",
        "movies_df = pd.DataFrame(movies)\n",
        "\n",
        "vectorizer = TfidfVectorizer(stop_words='english')\n",
        "tfidf_matrix = vectorizer.fit_transform(movies_df['description'])\n",
        "\n",
        "cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)\n",
        "\n",
        "def get_recommendations(movie_title, num_recommendations=5):\n",
        "    movie_index = movies_df[movies_df['title'] == movie_title].index[0]\n",
        "    similarities = cosine_sim[movie_index]\n",
        "    similar_movies_indices = similarities.argsort()[:-num_recommendations-1:-1][1:]  # Exclude the movie itself\n",
        "    recommended_movies = movies_df.iloc[similar_movies_indices]['title'].tolist()\n",
        "    return recommended_movies\n",
        "\n",
        "\n",
        "user_liked_movie = 'Movie A'\n",
        "recommendations = get_recommendations(user_liked_movie, num_recommendations=3)\n",
        "print(f\"Recommendations for {user_liked_movie}: {recommendations}\")"
      ]
    }
  ]
}